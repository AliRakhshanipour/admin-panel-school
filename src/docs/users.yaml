# src/docs/users.yaml
paths:
  /users:
    post:
      summary: Create a new user
      description: Registers a new user (super-user only).
      tags:
        - Users
      security:
        - bearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UserRequest'
      responses:
        '201':
          description: User created successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                    example: true
                  message:
                    type: string
                    example: "User created successfully"
                  user:
                    $ref: '#/components/schemas/UserResponse'
        '400':
          description: Validation error or duplicate username
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '401':
          description: Unauthorized (no token or invalid token)
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '403':
          description: Forbidden (not super-user)
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'

    get:
      summary: Get all users
      description: Retrieves a list of all users (accessible to super-users and admins).
      tags:
        - Users
      security:
        - bearerAuth: []
      responses:
        '200':
          description: Users fetched successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                    example: true
                  message:
                    type: string
                    example: "Users fetched successfully"
                  users:
                    type: array
                    items:
                      $ref: '#/components/schemas/UserResponse'
        '401':
          description: Unauthorized (no token or invalid token)
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'

  /users/{id}:
    get:
      summary: Get a user by ID
      description: Fetches details of a specific user (accessible to super-users and admins).
      tags:
        - Users
      security:
        - bearerAuth: []
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: integer
            minimum: 1
          description: ID of the user to retrieve
      responses:
        '200':
          description: User fetched successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                    example: true
                  message:
                    type: string
                    example: "User fetched successfully"
                  user:
                    $ref: '#/components/schemas/UserResponse'
        '400':
          description: Invalid user ID
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '401':
          description: Unauthorized (no token or invalid token)
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '404':
          description: User not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'

    patch:
      summary: Update a user
      description: Updates a user's information (super-user only).
      tags:
        - Users
      security:
        - bearerAuth: []
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: integer
            minimum: 1
          description: ID of the user to update
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UserPatchRequest'
      responses:
        '200':
          description: User updated successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                    example: true
                  message:
                    type: string
                    example: "User updated successfully"
                  user:
                    $ref: '#/components/schemas/UserResponse'
        '400':
          description: Validation error or invalid ID
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '401':
          description: Unauthorized (no token or invalid token)
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '403':
          description: Forbidden (not super-user)
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '404':
          description: User not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'

    delete:
      summary: Delete a user
      description: Deletes a user (super-user only).
      tags:
        - Users
      security:
        - bearerAuth: []
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: integer
            minimum: 1
          description: ID of the user to delete
      responses:
        '200':
          description: User deleted successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                    example: true
                  message:
                    type: string
                    example: "User deleted successfully"
        '400':
          description: Invalid user ID
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '401':
          description: Unauthorized (no token or invalid token)
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '403':
          description: Forbidden (not super-user)
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '404':
          description: User not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'

components:
  schemas:
    UserRequest:
      type: object
      properties:
        username:
          type: string
          example: "admin1"
          description: "Unique username for the user"
        password:
          type: string
          example: "password123"
          description: "User's password (min 6 characters)"
        role:
          type: string
          enum: ["super-user", "user"]
          example: "user"
          description: "User's role"
      required:
        - username
        - password
        - role

    UserPatchRequest:
      type: object
      properties:
        username:
          type: string
          example: "admin1_updated"
          description: "New username (optional)"
        password:
          type: string
          example: "newpassword123"
          description: "New password (optional, min 6 characters)"
        role:
          type: string
          enum: ["super-user", "user"]
          example: "user"
          description: "New role (optional)"
      minProperties: 1

    UserResponse:
      type: object
      properties:
        id:
          type: integer
          example: 1
          description: "Unique user ID"
        username:
          type: string
          example: "admin1"
        role:
          type: string
          example: "user"
        createdAt:
          type: string
          format: date-time
          example: "2025-03-14T10:00:00Z"
          description: "Creation timestamp"