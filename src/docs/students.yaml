openapi: 3.0.0
info:
  title: Student API
  description: API documentation for managing students in the School Management System
  version: 1.0.0

servers:
  - url: http://localhost:5000
    description: Local development server

paths:
  /students:
    post:
      summary: Create a new student
      description: Adds a new student to the system with required fields and optional class assignment.
      tags:
        - Students
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/StudentRequest'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/StudentRequest'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/StudentRequest'
      responses:
        '201':
          description: Student created successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                    example: true
                  message:
                    type: string
                    example: "Student created successfully"
                  student:
                    $ref: '#/components/schemas/StudentResponse'
        '400':
          description: Validation error, duplicate studentCode/nationalCode, or invalid subFieldId
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'

    get:
      summary: Get all students
      description: Retrieves a paginated list of students with optional filtering by various attributes.
      tags:
        - Students
      parameters:
        - name: firstName
          in: query
          schema:
            type: string
          description: Filter by partial first name match (case-insensitive)
        - name: lastName
          in: query
          schema:
            type: string
          description: Filter by partial last name match (case-insensitive)
        - name: studentCode
          in: query
          schema:
            type: string
          description: Filter by exact student code
        - name: nationalCode
          in: query
          schema:
            type: string
          description: Filter by exact national code
        - name: gender
          in: query
          schema:
            type: string
            enum: [male, female, other]
          description: Filter by gender
        - name: status
          in: query
          schema:
            type: string
            enum: [active, inactive]
          description: Filter by status
        - name: graduated
          in: query
          schema:
            type: boolean
          description: Filter by graduation status
        - name: minAge
          in: query
          schema:
            type: integer
            minimum: 0
          description: Filter by minimum age (inclusive)
        - name: maxAge
          in: query
          schema:
            type: integer
            minimum: 0
          description: Filter by maximum age (inclusive)
        - name: page
          in: query
          schema:
            type: integer
            minimum: 1
            default: 1
          description: Page number for pagination
        - name: limit
          in: query
          schema:
            type: integer
            minimum: 1
            default: 10
          description: Number of students per page
      responses:
        '200':
          description: Successfully retrieved students
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                    example: true
                  message:
                    type: string
                    example: "Students fetched successfully"
                  total:
                    type: integer
                    example: 50
                  students:
                    type: array
                    items:
                      $ref: '#/components/schemas/StudentListResponse'

  /students/{studentId}:
    get:
      summary: Get a student by ID
      description: Fetches detailed information about a specific student, including their subField and class.
      tags:
        - Students
      parameters:
        - name: studentId
          in: path
          required: true
          schema:
            type: integer
            minimum: 1
          description: ID of the student to retrieve
      responses:
        '200':
          description: Student retrieved successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                    example: true
                  message:
                    type: string
                    example: "Student fetched successfully"
                  student:
                    $ref: '#/components/schemas/StudentResponse'
        '400':
          description: Invalid student ID
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '404':
          description: Student not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'

    patch:
      summary: Update a student by ID
      description: Partially updates a student's information.
      tags:
        - Students
      parameters:
        - name: studentId
          in: path
          required: true
          schema:
            type: integer
            minimum: 1
          description: ID of the student to update
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/StudentRequest'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/StudentRequest'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/StudentRequest'
      responses:
        '200':
          description: Student updated successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                    example: true
                  message:
                    type: string
                    example: "Student updated successfully"
                  student:
                    $ref: '#/components/schemas/StudentResponse'
        '400':
          description: Invalid student ID, duplicate studentCode/nationalCode, or validation error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '404':
          description: Student not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'

    delete:
      summary: Delete a student by ID
      description: Removes a student from the system.
      tags:
        - Students
      parameters:
        - name: studentId
          in: path
          required: true
          schema:
            type: integer
            minimum: 1
          description: ID of the student to delete
      responses:
        '200':
          description: Student deleted successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                    example: true
                  message:
                    type: string
                    example: "Student deleted successfully"
        '400':
          description: Invalid student ID
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '404':
          description: Student not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'

  /students/{studentId}/graduate:
    patch:
      summary: Update student graduation status
      description: Changes the graduation status of a student.
      tags:
        - Students
      parameters:
        - name: studentId
          in: path
          required: true
          schema:
            type: integer
            minimum: 1
          description: ID of the student to update
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/GraduatedRequest'
      responses:
        '200':
          description: Graduation status updated successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                    example: true
                  message:
                    type: string
                    example: "Graduated status changed to true"
                  student:
                    $ref: '#/components/schemas/StudentResponse'
        '400':
          description: Invalid student ID or graduated value
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '404':
          description: Student not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'

  /students/{studentId}/field:
    patch:
      summary: Change student subField
      description: Updates the subField assignment for a student.
      tags:
        - Students
      parameters:
        - name: studentId
          in: path
          required: true
          schema:
            type: integer
            minimum: 1
          description: ID of the student to update
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ChangeFieldRequest'
      responses:
        '200':
          description: Student subField changed successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                    example: true
                  message:
                    type: string
                    example: "Student's subField changed to 3"
                  student:
                    $ref: '#/components/schemas/StudentResponse'
        '400':
          description: Invalid student ID or subFieldId
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '404':
          description: Student or subField not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'

  /students/{studentId}/class:
    patch:
      summary: Assign student to a class
      description: Assigns a student to a specified class.
      tags:
        - Students
      parameters:
        - name: studentId
          in: path
          required: true
          schema:
            type: integer
            minimum: 1
          description: ID of the student to assign
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ClassAssignmentRequest'
      responses:
        '200':
          description: Student assigned to class successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                    example: true
                  message:
                    type: string
                    example: "Student assigned to class with ID 1 successfully"
                  student:
                    $ref: '#/components/schemas/StudentResponse'
        '400':
          description: Invalid student ID or classId
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '404':
          description: Student or class not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'

components:
  schemas:
    StudentRequest:
      type: object
      properties:
        firstName:
          type: string
          example: "John"
          description: "Student's first name"
        lastName:
          type: string
          example: "Doe"
          description: "Student's last name"
        studentCode:
          type: string
          example: "STU12345"
          description: "Unique student code"
        phone:
          type: string
          example: "09123456789"
          description: "Student's mobile phone number (Iranian format)"
        staticPhone:
          type: string
          example: "02112345678"
          description: "Student's landline phone number (Iranian format)"
        nationalCode:
          type: string
          example: "1234567890"
          description: "Student's 10-digit national code"
        nationality:
          type: string
          enum: ["ایران", "توابع"]
          example: "ایران"
          description: "Student's nationality"
        dropOutSchool:
          type: boolean
          example: false
          description: "Whether the student has dropped out"
        address:
          type: string
          example: "Tehran, Iran"
          description: "Student's address"
        gender:
          type: string
          enum: ["male", "female", "other"]
          example: "male"
          description: "Student's gender"
        fatherName:
          type: string
          example: "Ali Doe"
          description: "Student's father's name"
        fatherPhone:
          type: string
          example: "09123456789"
          description: "Father's mobile phone number (Iranian format)"
        motherPhone:
          type: string
          example: "09123456789"
          description: "Mother's mobile phone number (Iranian format)"
        siblingsNumber:
          type: integer
          example: 2
          description: "Number of siblings"
        age:
          type: integer
          example: 16
          description: "Student's age"
        field:
          type: string
          example: "Computer Science"
          description: "Student's field of study"
        status:
          type: string
          enum: ["active", "inactive"]
          example: "active"
          description: "Student's status"
        graduated:
          type: boolean
          example: false
          description: "Whether the student has graduated"
        lastSchool:
          type: string
          example: "Tehran High School"
          description: "Student's last attended school"
        lastYearAverage:
          type: number
          format: float
          example: 18.5
          description: "Student's last year average grade (0-20)"
        subFieldId:
          type: integer
          example: 3
          description: "ID of the student's subField"
        classId:
          type: integer
          example: 1
          description: "ID of the student's assigned class (optional)"
          nullable: true
      required:
        - firstName
        - lastName
        - studentCode
        - phone
        - staticPhone
        - nationalCode
        - nationality
        - dropOutSchool
        - address
        - gender
        - fatherName
        - fatherPhone
        - motherPhone
        - siblingsNumber
        - age
        - field
        - status
        - graduated
        - lastSchool
        - lastYearAverage
        - subFieldId

    StudentResponse:
      type: object
      properties:
        id:
          type: integer
          example: 1
          description: "Unique student ID"
        firstName:
          type: string
          example: "John"
        lastName:
          type: string
          example: "Doe"
        studentCode:
          type: string
          example: "STU12345"
        phone:
          type: string
          example: "09123456789"
        staticPhone:
          type: string
          example: "02112345678"
        nationalCode:
          type: string
          example: "1234567890"
        nationality:
          type: string
          example: "ایران"
        dropOutSchool:
          type: boolean
          example: false
        address:
          type: string
          example: "Tehran, Iran"
        gender:
          type: string
          example: "male"
        fatherName:
          type: string
          example: "Ali Doe"
        fatherPhone:
          type: string
          example: "09123456789"
        motherPhone:
          type: string
          example: "09123456789"
        siblingsNumber:
          type: integer
          example: 2
        age:
          type: integer
          example: 16
        field:
          type: string
          example: "Computer Science"
        status:
          type: string
          example: "active"
        graduated:
          type: boolean
          example: false
        lastSchool:
          type: string
          example: "Tehran High School"
        lastYearAverage:
          type: number
          example: 18.5
        subFieldId:
          type: integer
          example: 3
        classId:
          type: integer
          example: 1
          nullable: true
        createdAt:
          type: string
          format: date-time
          example: "2025-03-14T10:00:00Z"
          description: "Creation timestamp"
        updatedAt:
          type: string
          format: date-time
          example: "2025-03-14T12:00:00Z"
          description: "Last update timestamp"
        subField:
          type: object
          properties:
            id:
              type: integer
              example: 3
            name:
              type: string
              example: "Software Engineering"
          description: "Details of the assigned subField"
        class:
          type: object
          properties:
            id:
              type: integer
              example: 1
            name:
              type: string
              example: "Class 10A"
            number:
              type: integer
              example: 10
          description: "Details of the assigned class"
          nullable: true

    StudentListResponse:
      type: object
      properties:
        id:
          type: integer
          example: 1
        fullName:
          type: string
          example: "John Doe"
          description: "Concatenated firstName and lastName"
        studentCode:
          type: string
          example: "STU12345"
        nationalCode:
          type: string
          example: "1234567890"

    GraduatedRequest:
      type: object
      properties:
        graduated:
          type: boolean
          example: true
          description: "New graduation status"
      required:
        - graduated

    ChangeFieldRequest:
      type: object
      properties:
        subFieldId:
          type: integer
          example: 3
          description: "ID of the new subField"
      required:
        - subFieldId

    ClassAssignmentRequest:
      type: object
      properties:
        classId:
          type: integer
          example: 1
          description: "ID of the class to assign the student to"
      required:
        - classId

    ErrorResponse:
      type: object
      properties:
        success:
          type: boolean
          example: false
        statusCode:
          type: integer
          example: 400
        message:
          type: string
          example: "Invalid student ID"
        error:
          type: string
          example: "BadRequest"
        stack:
          type: string
          example: "Error stack trace..."
          description: "Stack trace (development only)"
      required:
        - success
        - statusCode
        - message